
package fr.utbm.ia54.Agent

import io.sarl.core.Initialize
import io.sarl.core.Logging
import fr.utbm.ia54.Event.TileSet
import io.sarl.core.DefaultContextInteractions
import fr.utbm.ia54.Event.TokenReceived
import fr.utbm.ia54.Event.Assault 
import fr.utbm.ia54.Event.TokenReleased
import io.sarl.util.Scopes
import java.util.UUID
import fr.utbm.taquin.events.ActionUI
import fr.utbm.ia54.Event.AskNeighbourSatisfaction
import fr.utbm.ia54.Event.ResponseNeighbourSatisfaction
import fr.utbm.ia54.Event.EndAgent
import io.sarl.core.Behaviors
import io.sarl.core.Schedules
import fr.utbm.ia54.Event.SafetyWait
import io.sarl.core.Lifecycle
import fr.utbm.ia54.Event.UpdateProblemInformations
import fr.utbm.ia54.Enum.Direction
import fr.utbm.ia54.Enum.Satisfaction
import fr.utbm.ia54.Class.StaticVars

agent TileAgent {
	uses Logging, DefaultContextInteractions, Behaviors, Schedules, Lifecycle 

	var isHappy = false // at right place or no (though kind of redundant with bool pleasant on frameAgent (could be useless)) 
	var angry = false // currently assaulting someone or not
	var numTile : int
	var numTileFromZero : int
	var numFrameHost : int //from 1
	var numFrameHostFromZero : int
	var uuidFrameHost : UUID
	var problemSize : int
	var tokenPriority : int
	//var didHaveTheToken : Boolean 

	var parentAgent : UUID
	
	on Initialize {

		if (this.class === null)
			return;
 
		parentAgent = occurrence.spawner

		numTile = occurrence.parameters.get(0) as Integer
		numTileFromZero = numTile - 1
  
		uuidFrameHost = occurrence.parameters.get(1) as UUID
		numFrameHostFromZero = occurrence.parameters.get(2) as Integer
		problemSize = StaticVars.problemSize
		
		numFrameHost = numFrameHostFromZero + 1

		//didHaveTheToken = false

		// Setting tokenPriority consulted by the scheduler
		tokenPriority = Math.min((numTile-1) / problemSize, (numTile-1) % problemSize)

		loggingName = 'TileAgent' + numTile // num to change
		
		if (numTileFromZero === numFrameHostFromZero)
		{
			isHappy = true
		}

		in(1000)[wake(new SafetyWait())]
		//emit(new TileSet(this,null)) 
		
		// info("DEBUGG : Agent is set up.")
	}

	// Attempt at avoiding null pointer exceptions
	on SafetyWait {
		emit(new TileSet(this, null))
	}
	
	on TokenReceived {
		
		info("INFO : I received the token.")

		/*// Information useful to avoid getting stuck on corners
		didHaveTheToken = true;*/
		
		if (isHappy) {
			emit(new TokenReleased())
		
		} else {
  
//			info("JE VAIS CHANGER COULEUR : je suis "+ID)
			emit(new ActionUI("red", numTile), Scopes.addresses(defaultSpace.getAddress(parentAgent)))

			// We have to choose a target
			// Boolean useless (only here for compilation purpose)
			var b = chooseTarget
			
		}
		
   
   		// old comments : [
   
		// si (mon_etat = agressé)
		// j'agresse un voisin pour fuir
		
			// sinon si (mon_humeur = satisfait)
		// je transmet le token gratuitement à quelqu'un sans l'agresser
		
			// sinon si (mon_humeur = non_satisfait)
		// j'agresse un voisin pour accroitre ma satisfaction]
		
	}
	  
	def chooseTarget : boolean {

		//info("DEBUGG : choose target")

		// If I am on the same line or column as my desired spot, I just go in the spot direction
		
		// I am at the right longitude, therefore I will assault north or south
		if (numFrameHostFromZero % problemSize === numTileFromZero % problemSize){
			if (numTileFromZero < numFrameHostFromZero)
				emit(new Assault(Direction.NORTH, false), Scopes.identifiers(uuidFrameHost))
			else
				emit(new Assault(Direction.SOUTH, false), Scopes.identifiers(uuidFrameHost))
		}
		// I am at the right latitude, therefore I will assault east or west
		else if (numFrameHostFromZero / problemSize === numTileFromZero / problemSize){
			if (numTileFromZero < numFrameHostFromZero)
				emit(new Assault(Direction.WEST, false), Scopes.identifiers(uuidFrameHost))
			else
				emit(new Assault(Direction.EAST, false), Scopes.identifiers(uuidFrameHost))
		 }
		// If I am not on the same line or column as my desired spot, I can choose between the two directions that will bring me closer
		else {

			//info("DEBUGG : choose target between two targets")
			
			// Finding out these two possible directions :
			
			// Looking up if I am to the north or to the south of my target frame
			var north = (numFrameHostFromZero / problemSize >= numTileFromZero / problemSize)
	
			// Looking up if I am to the west or to the east of my target frame
			var west = (numFrameHostFromZero % problemSize >= numTileFromZero % problemSize)
			
		 	// I have to choose between two targets, I ask my frame to get more informations
			emit(new AskNeighbourSatisfaction(north, west), Scopes.identifiers(uuidFrameHost))
			
		} 

		// If void function, code does not compile...
		return true
	}
	 
	// We had to ask for more informations to choose who to target
	on ResponseNeighbourSatisfaction {

		//info("DEBUGG : Assault one of the neighbour that responded")
		
		// The map has only two entries
		// We get first entry of the map
		var iter = occurrence.neighbourSatisfaction.entrySet().iterator()
		var entry = iter.next()

		// If this neighbour is unhappy, therefore we can target him
		if (entry.value === Satisfaction.UNSATISFIED)
		{
			//info ("DEBUGG : Assault first neighbour which responded")
			emit(new Assault(entry.key, false), Scopes.identifiers(uuidFrameHost))
		}
		// Wether or not the second neighbour is happy, we have to target someone anyway
		else {
			
			// Storing Direction of first neighbour for third case
			var firstDir = entry.key
			
			//info("DEBUGG : Assault second neighbour which responded")
			entry = iter.next()
			
			if (entry.value !== Satisfaction.TOKEN_SATISFIED)
				emit(new Assault(entry.key, false), Scopes.identifiers(uuidFrameHost))
			else
				// We rather attack the neighbour which is not TOKEN_SATISFIED. If he happens to be as well... We have to attack one anyway
				emit(new Assault(firstDir, false), Scopes.identifiers(uuidFrameHost))
		}
	}

	// Has to update informations from its frame host & send back data to the frame
	on UpdateProblemInformations {

		//info("DEBUGG : Updating data in TileAgent")
		
		uuidFrameHost = occurrence.id
		numFrameHost = occurrence.num
		numFrameHostFromZero = numFrameHost - 1

		if (numFrameHost === numTile)
			isHappy = true
		else
			isHappy = false
		
		//info("DEBUGG : UpdateProblemInformations [IN TILE, SENDING BACK INFO]")
		
		emit(new UpdateProblemInformations(numTile, this.ID, occurrence.sendAckTo), Scopes.addresses(defaultSpace.getAddress(occurrence.id)))
	}
	
	on Assault {
	}

	def getNumFrameHost : int{
		return this.numFrameHost
	}
	
	def setNumFrameHost(num : int){
		this.numFrameHost = num
	}

	def getNumFrameHostFromZero : int {
		return this.numFrameHostFromZero
	} 

	def setNumFrameHostFromZero(num : int) {
		this.numFrameHostFromZero = num
	}
	
	def getUuidFrameHost : UUID{
		return this.uuidFrameHost
	}
	
	def setUuidFrameHost(uuid : UUID){
		this.uuidFrameHost = uuid
	}
	
	def getTokenPriority : int {
		this.tokenPriority
	}

	def getNumTile : int {
		this.numTile
	}

	def getIsHappy : boolean {
		this.isHappy
	} 
	
	def setIsHappy(happy : boolean){
		this.isHappy = happy
	}
	
	def getNumTileFromZero : int {
		return numTileFromZero 
	}

	on EndAgent {
		killMe
	}

}

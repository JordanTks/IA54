/** 
 * 
 */
package fr.utbm.ia54.Agent


import io.sarl.core.Initialize
import io.sarl.core.Logging
import io.sarl.core.Lifecycle
import io.sarl.core.Schedules
import io.sarl.core.DefaultContextInteractions
import io.sarl.core.InnerContextAccess
import fr.utbm.ia54.Event.Assault
import fr.utbm.ia54.Event.FrameSet
import java.util.UUID
import fr.utbm.ia54.Class.CoordPair
import fr.utbm.ia54.Event.PathCalculation
import fr.utbm.ia54.Event.EndAgent
import fr.utbm.ia54.Event.PathFound
import io.sarl.util.Scopes
import fr.utbm.ia54.Event.AskNeighbourSatisfaction
import java.util.LinkedHashMap
import fr.utbm.ia54.Event.ResponseNeighbourSatisfaction
import fr.utbm.ia54.Event.FindPathWithAstarAlgo
import io.sarl.core.Behaviors
import fr.utbm.ia54.Event.SafetyWait
import java.util.ArrayList
import fr.utbm.ia54.Event.PathCalculationTimeOut
import fr.utbm.ia54.Event.TokenReleased
import java.util.Collections
import fr.utbm.ia54.Event.UpdateProblemInformations
import fr.utbm.ia54.Event.AcknowledgmentDataUpdated
import fr.utbm.ia54.Event.UpdateGUI
import fr.utbm.ia54.Enum.Direction
import fr.utbm.ia54.Enum.Satisfaction
import fr.utbm.ia54.Enum.PathStatus
import fr.utbm.ia54.Class.StaticVars

/** 
 * @author Jordan
 * 
 */
agent FrameAgent {
	uses Logging, Lifecycle, Schedules, InnerContextAccess, DefaultContextInteractions, Behaviors

	//var lastInitiatedAssault = 0l
	var previousPathCalculationId : long
	var previousPathCalculationJumpValue : int
	var previousPathStatus : PathStatus
	var bestGoodPath : ArrayList<FrameAgent>
	var bestBadPath : ArrayList<FrameAgent>
	var bestTerriblePath : ArrayList<FrameAgent>

	// Swapping Tiles
	var nbAck : Integer
	var pathUpdateGUI : ArrayList<FrameAgent>

	// FrameAgent state
	var isSatisfied = false
	var isBlocked = false // the tile which with it is paired will never move
	var didMyTileMateHaveTheToken = false
	
	// FrameAgent knowledge
	var nbActiveNeighbours : int
	var northNeighbour : UUID
	var eastNeighbour : UUID
	var southNeighbour : UUID
	var westNeighbour : UUID

	var hostedTile : UUID
	var hostedNumTile : int
	
	// Temporary knowledge
	var neighbourSatisfaction = new LinkedHashMap<Direction, Satisfaction>()
	
	var ready = false 
	var problemSize = -1

	var idNum = -1
  	var idNumFromZero : int
  
	var xRow = -1
	var yCol = -1
	var coordPair : CoordPair // coords (Xrow,Ycol) of the frame
	var costG = 0 // from beginning to current
	var costH = 0 // from current to arrival
	var costF = 0 // sum of the previous (memorize)
	var uuidPreviousFrame : UUID
	var coordsXYPreviousFrame : CoordPair

	var nbTimesBothered : int

	on Initialize { 
		
		idNum = occurrence.parameters.get(0) as Integer
		idNumFromZero = idNum - 1

		xRow = occurrence.parameters.get(1) as Integer
		yCol = occurrence.parameters.get(2) as Integer
		coordPair = new CoordPair(xRow,yCol)
		
		problemSize = StaticVars.problemSize
		
		nbActiveNeighbours = 0
		northNeighbour = null
		eastNeighbour = null
		southNeighbour = null
		westNeighbour = null

		loggingName = 'FrameAgent' + idNum

		in (1000) [wake(new SafetyWait())]
		//emit(new FrameSet(this))
		
		// info("DEBUGG : Agent is set up.")
	}
	
	// Attempt at avoiding null pointer exceptions
	on SafetyWait {
		emit(new FrameSet(this))
	}

	// Forwards the question to the neighbours
	on AskNeighbourSatisfaction [!isAsked] {

		// info("DEBUGG : AskNeighbourSatisfaction !isAsked")
 
		// Clearing answers map
		neighbourSatisfaction.clear

		// Asking satisfaction of the two neighbour frames
		if (occurrence.north)
			emit(new AskNeighbourSatisfaction(true, Direction.NORTH), Scopes.identifiers(northNeighbour))
		else
			emit(new AskNeighbourSatisfaction(true, Direction.SOUTH), Scopes.identifiers(southNeighbour))

		if (occurrence.west)
			emit(new AskNeighbourSatisfaction(true, Direction.WEST), Scopes.identifiers(westNeighbour))
		else
			emit(new AskNeighbourSatisfaction(true, Direction.EAST), Scopes.identifiers(eastNeighbour))
	}

	// Get asked and have to answer back
	on AskNeighbourSatisfaction [isAsked] {

		// info("DEBUGG : AskNeighbourSatisfaction isAsked")
		
		// Answers back to the event transmitter
		if (didMyTileMateHaveTheToken)
		{	
			if (isSatisfied) {
				emit(new ResponseNeighbourSatisfaction(Satisfaction.TOKEN_SATISFIED, occurrence.direction), Scopes.identifiers(occurrence.source.UUID))	
			}
			else {
				emit(new ResponseNeighbourSatisfaction(Satisfaction.UNSATISFIED, occurrence.direction), Scopes.identifiers(occurrence.source.UUID))	
			}
		}
		else
		{
			if (isSatisfied) {
				emit(new ResponseNeighbourSatisfaction(Satisfaction.RANDOMLY_SATISFIED, occurrence.direction), Scopes.identifiers(occurrence.source.UUID))
			} else {
				emit(new ResponseNeighbourSatisfaction(Satisfaction.UNSATISFIED, occurrence.direction), Scopes.identifiers(occurrence.source.UUID))
			}
		}
	}

	// Receive a response from a neighbour
	on ResponseNeighbourSatisfaction {

		//info("DEBUGG : ResponseNeighbourSatisfaction [frame] : direction " + occurrence.direction + "    isSatisfied " + occurrence.isSatisfied)

		synchronized (neighbourSatisfaction) {

			// Store answer in map
			neighbourSatisfaction.put(occurrence.direction, occurrence.isSatisfied)
	
			// We check how much data we collected
			if (neighbourSatisfaction.size >= 2)
			{
				// We have two answers, therefore we can send back the results to the tile
				emit(new ResponseNeighbourSatisfaction(neighbourSatisfaction), Scopes.identifiers(hostedTile))
				// We risk clearing the list before the event is received -> null pointer exception ?
				// neighbourSatisfaction.clear
			}	
		}
	}

	// The assault must be forwarded to the right frame
	on Assault [!isAttacked] {

		// info("DEBUGG : I FORWARD ASSAULT !")
		
		// Remove potential data from former path calculations
		bestGoodPath = null
		bestBadPath = null
		bestTerriblePath = null
		
		// Assault the neighbour it was asked to
		if (occurrence.direction === Direction.NORTH)
			emit(new Assault(Direction.SOUTH, true), Scopes.identifiers(northNeighbour))
		else if (occurrence.direction === Direction.SOUTH)
			emit(new Assault(Direction.NORTH, true), Scopes.identifiers(southNeighbour))
		else if (occurrence.direction === Direction.WEST)
			emit(new Assault(Direction.EAST, true), Scopes.identifiers(westNeighbour))
		else if (occurrence.direction === Direction.EAST)
			emit(new Assault(Direction.WEST, true), Scopes.identifiers(eastNeighbour))
	}

	// The frame is being assaulted
	on Assault [isAttacked] {

		//error("=========================================== DEBUGG : I GOT ATTACKED ! emit FINDPATH! /hostedNumTile=" + hostedNumTile)
		info("DEBUGG : I GOT ATTACKED !")

		// I have to run away by finding a path between me and the empty tile
		
		if (!StaticVars.isDistributed)
			emit(new FindPathWithAstarAlgo(ID))
		
		else if (StaticVars.isDistributed) {
			wake(new PathCalculation(System.currentTimeMillis, occurrence.source.UUID, occurrence.direction, System.currentTimeMillis, PathStatus.GOOD, false, 0, new ArrayList<FrameAgent>))
			in (StaticVars.timeout) [emit(new PathCalculationTimeOut(), Scopes.addresses(defaultSpace.getAddress(occurrence.source.UUID)))]
		}
	}
	
	// PathCalculation by spreading message
	on PathCalculation {
		
		// Discard message if timeout
		if (System.currentTimeMillis - StaticVars.timeout > occurrence.timeStamp)
			return;
		
		// Discard message if I am the one who initiated the attack
		if (occurrence.requestOrigin == this.ID)
			return;
		
		// Discard message if I am blocked
		if (isBlocked)
			return;
		
		// Check already forwarded path calculations to avoid spreading useless events
		// This implementation does NOT work if there are multiple different path calculations at once
		// -> The following would have to be modified
		
		// If the previous request was for the same path calculation ...
		if (previousPathCalculationId === occurrence.requestId)
		{
			// If it is a path of same status as the previous one ...
			if (occurrence.pathStatus === previousPathStatus)
			{
				// If I have a better path ...
				if (previousPathCalculationJumpValue < occurrence.jumpCount)
				{
					// ... it is useless to spread the message
					return;	
				}
			}
			else // If it is a path of different status...
			{
				// If I sent a better status path ...
				if (previousPathStatus === PathStatus.GOOD)
				{
					// ... it is useless to spread the message
					return;
				}
				// If I sent a better status path ...
				else if (previousPathStatus === PathStatus.BAD && occurrence.pathStatus === PathStatus.TERRIBLE)
				{
					// ... it is useless to spread the message
					return;
				}
			}
		}
		
		// Setting the values for the next PathCalculation received
		previousPathCalculationId = occurrence.requestId
		previousPathCalculationJumpValue = occurrence.jumpCount
		previousPathStatus = occurrence.pathStatus
		
		// Adding itself to the path
		var p : ArrayList<FrameAgent>
		//p = occurrence.path.clone as ArrayList <FrameAgent>
		p = new ArrayList<FrameAgent>
		p.addAll(occurrence.path)
		p.add(this)
		
		// If we host the blank tile ...
		if (hostedNumTile === 0)
		{
			// ... we send the path that was found
			emit(new PathFound(occurrence.requestId, occurrence.pathStatus, occurrence.jumpCount, p),
				Scopes.addresses(defaultSpace.getAddress(occurrence.requestOrigin)))
			// We avoid spreading more useless PathCalculation
			return
		}
		
		var newPathStatus = occurrence.pathStatus
		
		// If the path we are forwarding is not terrible, we check we are not making things worse by coming here
		if ((newPathStatus !== PathStatus.TERRIBLE) && isSatisfied)
		{
			// If I had the token in the past ...
			if (didMyTileMateHaveTheToken)
			{
				// ... it is a terrible path
				newPathStatus = PathStatus.TERRIBLE
			}
			// If I am happy but did not have the token yet ...
			else
			{
				// ... it is a bad path
				newPathStatus = PathStatus.BAD
			}	
		}

		//info("PathCalculation DEBUGG : status : " + newPathStatus)
		/*info("PathCalculation DEBUGG : previous status : " + occurrence.pathStatus)
		for (a : occurrence.path) {
			info("path : " + a.numFrame)
		}*/
		
		// If we are a corner, we forward the PathCalculation with the info it comes from a corner
		var isACorner = false

		if (nbActiveNeighbours == 2)
			isACorner = true
		
		// If we receive PathCalculation from a corner we forward PathCalculation to the opposite direction only
		if (occurrence.comesFromCorner)
		{
			if (isSatisfied)
			{
				if (occurrence.provenanceDirection === Direction.SOUTH)
				{
					if (northNeighbour !== null)
					{
						emit(new PathCalculation(occurrence.requestId, occurrence.requestOrigin, Direction.SOUTH,
							occurrence.timeStamp, newPathStatus, isACorner, occurrence.jumpCount + 1, p),
							Scopes.addresses(defaultSpace.getAddress(this.northNeighbour)))
							
						return
					}
				}
				
				if (occurrence.provenanceDirection === Direction.WEST)
				{
					if (eastNeighbour !== null)
					{
						emit(new PathCalculation(occurrence.requestId, occurrence.requestOrigin, Direction.WEST,
							occurrence.timeStamp, newPathStatus, isACorner, occurrence.jumpCount + 1, p),
							Scopes.addresses(defaultSpace.getAddress(this.eastNeighbour)))
							
						return
					}
				}
			}
		}
		
		// If I am at a unique spot on the board, I have to behave differently in order to solve the last 3x3 problem
		// Path from the east
		if (occurrence.provenanceDirection === Direction.EAST)
		{
			// 3rd to last line
			if (idNumFromZero / problemSize === problemSize - 3)
			{
				// 2nd to last column
				if (idNumFromZero % problemSize === problemSize - 2)
				{
					if (didMyTileMateHaveTheToken)
					{
						// Helps to avoid getting stuck on a routine
						nbTimesBothered++
						
						if (nbTimesBothered % 2 === 0)
						{
							// Forward only to opposite direction (west)
							emit(new PathCalculation(occurrence.requestId, occurrence.requestOrigin, Direction.EAST,
								occurrence.timeStamp, newPathStatus, isACorner, occurrence.jumpCount + 1, p),
								Scopes.addresses(defaultSpace.getAddress(this.westNeighbour)))
							
							return
						}
					}
				}	
			}
		}
		
		// If we do not host the blank tile, we send the event PathCalculation to our neighbours ...
		// ... north one
		if (northNeighbour !== null && occurrence.provenanceDirection !== Direction.NORTH)
			emit(new PathCalculation(occurrence.requestId, occurrence.requestOrigin, Direction.SOUTH,
				occurrence.timeStamp, newPathStatus, isACorner, occurrence.jumpCount + 1, p),
				Scopes.addresses(defaultSpace.getAddress(this.northNeighbour)))
		// ... east one
		if (eastNeighbour !== null && occurrence.provenanceDirection !== Direction.EAST)
			emit(new PathCalculation(occurrence.requestId, occurrence.requestOrigin, Direction.WEST,
				occurrence.timeStamp, newPathStatus, isACorner, occurrence.jumpCount + 1, p),
				Scopes.addresses(defaultSpace.getAddress(this.eastNeighbour)))
		// ... south one
		if (southNeighbour !== null && occurrence.provenanceDirection !== Direction.SOUTH)
			emit(new PathCalculation(occurrence.requestId, occurrence.requestOrigin, Direction.NORTH,
				occurrence.timeStamp, newPathStatus, isACorner, occurrence.jumpCount + 1, p),
				Scopes.addresses(defaultSpace.getAddress(this.southNeighbour)))
		// ... west one
		if (westNeighbour !== null && occurrence.provenanceDirection !== Direction.WEST)
			emit(new PathCalculation(occurrence.requestId, occurrence.requestOrigin, Direction.EAST,
				occurrence.timeStamp, newPathStatus, isACorner, occurrence.jumpCount + 1, p),
				Scopes.addresses(defaultSpace.getAddress(this.westNeighbour)))
		
	}
	
	// Store the path that we received
	on PathFound {
		
		// If the path is a "good" path
		if (occurrence.pathStatus === PathStatus.GOOD)
		{
			// We did not store any path yet
			if (bestGoodPath === null)
			{
				bestGoodPath = occurrence.path
				return
			}
			
			// If our stored path is longer than the new one we received
			if (bestGoodPath.size > occurrence.path.size)
			{
				bestGoodPath = occurrence.path
				return
			}
		}
		
		// If we do not have a good path yet, we bother considering a bad one (otherwise we don't)
		if (bestGoodPath === null)
		{
			if (occurrence.pathStatus === PathStatus.BAD)
			{
				// We did not store any path yet
				if (bestBadPath === null)
				{
					bestBadPath = occurrence.path
					return
				}

				// If our stored path is longer than the new one we received
				if (bestBadPath.size > occurrence.path.size)
				{
					bestBadPath = occurrence.path
					return
				}
			
			}
			
			// We could consider here, if bestForcedPath.size === occurrence.path.size
			// and compare the last frames of the path to avoid moving frames we just gave the token to
			// For now, we don't
		}

		// If we do not have any path yet, we bother considering a terrible one
		if (bestGoodPath === null && bestBadPath === null)
		{
			if (occurrence.pathStatus === PathStatus.TERRIBLE)
			{
				// We did not store any path yet
				if (bestTerriblePath === null)
				{
					bestTerriblePath = occurrence.path
					return
				}

				// If our stored path is longer than the new one we received
				if (bestTerriblePath.size > occurrence.path.size)
				{
					bestTerriblePath = occurrence.path
					return
				}

			}

			// We could consider here, if bestForcedPath.size === occurrence.path.size
			// and compare the last frames of the path to avoid moving frames we just gave the token to
			// For now, we don't
		}
	}

	// Time is up to find new paths, we now use the best path we found
	on PathCalculationTimeOut {
		
		// DEBUGGING PATHFINDING
		//info("DEBUGG : PathCalculationTimeOut")
		
		/*if (bestGoodPath !== null)
		{
			info("DEBUGG : There is a good path (length : " + bestGoodPath.size + ")")
			for (f : bestGoodPath)
				info("DEBUGG : GOOD PATH > " + f.numFrame)
		}

		if (bestBadPath !== null) {
			info("DEBUGG : There is a bad path (length : " + bestBadPath.size + ")")
			for (f : bestBadPath)
				info("DEBUGG : BAD PATH > " + f.numFrame)
		}

		if (bestTerriblePath !== null) {
			info("DEBUGG : There is a bad path (length : " + bestTerriblePath.size + ")")
			for (f : bestTerriblePath)
				info("DEBUGG : TERRIBLE PATH > " + f.numFrame)
		}*/
		
		// DEBUGG
		/*emit(new TokenReleased())
		if (true)
			return;*/
		
		// We have a good clean path
		if (bestGoodPath !== null)
		{
			initiateMovementChain(bestGoodPath)
		}
		// We have a path that will move some happy tiles on the way
		else if (bestBadPath !== null)
		{
			initiateMovementChain(bestBadPath)
		} // We have a path that will move some happy tiles on the way that had the token at some point
		else if (bestTerriblePath !== null)
		{
			initiateMovementChain(bestTerriblePath)
		}
		// We have nothing. We will try releasing the token hopping this solves something
		else
		{
			error("Warning/Error 03 : No path found in time at the end of PathCalculation spreading.")
			emit (new TokenReleased(false))
		}
	}
	
	def initiateMovementChain (path : ArrayList<FrameAgent>) {
		
		// Setting counter to know when we can release token
		nbAck = path.size + 1 // Waiting for an answer from each frame of the list + myself
		
		Collections.reverse(path);

		// List to send to UpdateGUI
		pathUpdateGUI = new ArrayList<FrameAgent>
		pathUpdateGUI.addAll(path)
		
		var tempID : UUID

		// While there are more than two elements, we have to swap informations
		while (path.size >= 2) {
			// Swapping hosted Tile UUID
			tempID = path.get(0).hostedTile
			path.get(0).hostedTile = path.get(1).hostedTile
			path.get(1).hostedTile = tempID

			// info("DEBUGG : iterateMovementChain id " + path.get(0).hostedTile)
			
			// Tells the frame to send its info to its new Hosted Tile & to wait for the info from the Tile afterwards
			emit(new UpdateProblemInformations(true, this.ID),
				Scopes.addresses(defaultSpace.getAddress(path.get(0).ID)))

			// We remove the first element of the list
			path.remove(0)
		}

		// Swapping hosted Tile UUID with original aggressor
		tempID = path.get(0).hostedTile
		path.get(0).hostedTile = this.hostedTile
		this.hostedTile = tempID

		emit(new UpdateProblemInformations(true, this.ID), Scopes.addresses(defaultSpace.getAddress(path.get(0).ID)))
		wake(new UpdateProblemInformations(true, this.ID))
	}
	
	// Has to send informations to its tile
	on UpdateProblemInformations [start] {

		//info("DEBUGG : UpdateProblemInformations : sending data to " + hostedTile)
		emit(new UpdateProblemInformations(idNum, this.ID, occurrence.sendAckTo), Scopes.addresses(defaultSpace.getAddress(hostedTile)))
	}
	
	// Has to update informations from its tile & tell initiator it is done
	on UpdateProblemInformations [!start] {
		
		hostedNumTile = occurrence.num
		
		if (hostedNumTile === idNum)
			isSatisfied = true
		else
			isSatisfied = false

		//info("DEBUGG : UpdateProblemInformations [END, SENDING ACK]")
		
		emit(new AcknowledgmentDataUpdated(), Scopes.addresses(defaultSpace.getAddress(occurrence.sendAckTo)))
	}
	
	on AcknowledgmentDataUpdated { 
		
		synchronized(nbAck) {
			nbAck--
		
			//info("DEBUGG : AcknowledgmentDataUpdated : nbAck : " + nbAck)
			
			// We received all the acknowledgments we were waiting for
			if (nbAck === 0)
			{
				// TRYING TO AVOID SYNCH ISSUES
				nbAck = -1
				
				// Do graphical update
				emit(new UpdateGUI(pathUpdateGUI))
				
				//emit(new TokenReleased())
			}
		}
	}
	
	def getXRow : int{
		return this.xRow
	}

	def getYCol : int {
		return this.yCol
	}

	def getCoordPair : CoordPair {
		return this.coordPair
	}
	
	def getIsSatisfied : boolean{
		return this.isSatisfied
	}

	def setIsSatisfied(b : boolean) {
		this.isSatisfied = b
	}

	def getIsBlocked : boolean {
		return this.isBlocked
	}

	def setIsBlocked(b : boolean) {
		this.isBlocked = b
	}

 	def getCostG() : int{
		return costG;
	}
	
	def setCostG(costG : int) {
			this.costG = costG;
	}

	def getCostH() : int{
			return costH;
	}

	def setCostH(costH : int) {
			this.costH = costH;
	}

	def getCostF() : int {
			return costF;
	}

	def setCostF(costF : int) {
			this.costF = costF;
	}

	def getUuidPreviousFrame() : UUID {
			return uuidPreviousFrame;
	}

	def setUuidPreviousFrame(uuidPreviousFrame : UUID) {
			this.uuidPreviousFrame = uuidPreviousFrame;
	}
 
	def getCoordsXYPreviousFrame() : CoordPair {
			return coordsXYPreviousFrame;
	}

	def setCoordsXYPreviousFrame(coordsXYPreviousFrame : CoordPair) {
			this.coordsXYPreviousFrame = coordsXYPreviousFrame;
	}
	
	def getCostsGHF : String{
		return "costG="+this.costG+" /costH="+this.costH+" /costF="+this.costF
	}
	
	def getIdNum : int {
		return this.idNum
	}
	
	def getNumFrame : int {
		this.idNum
	}
	
	def setNorthNeighbour(id : UUID) {
		northNeighbour = id
		nbActiveNeighbours++
	}

	def setEastNeighbour(id : UUID) {
		eastNeighbour = id
		nbActiveNeighbours++
	}

	def setSouthNeighbour(id : UUID) {
		southNeighbour = id
		nbActiveNeighbours++
	}

	def setWestNeighbour(id : UUID) {
		westNeighbour = id
		nbActiveNeighbours++
	}

	def getNbActiveNeighbours : int{
		return this.nbActiveNeighbours
	}

	def getNorthNeighbour : UUID {
		return this.northNeighbour
	}
	
	def getEastNeighbour : UUID {
		return this.eastNeighbour
	}
	
	def getSouthNeighbour : UUID {
		return this.southNeighbour
	}
	
	def getWestNeighbour : UUID {
			return this.westNeighbour
	}

	def setHostedTile(id : UUID) { 
		hostedTile = id
	} 
	
	def getHostedTile : UUID {
		return this.hostedTile
	} 
 
	def setHostedNumTile(num : int) {
		hostedNumTile = num
	}

	def getHostedNumTile : int {
		return this.hostedNumTile
	}

	def setNbActiveNeighbours (nb : int) {
		this.nbActiveNeighbours = nb
	}
	
	def setDidMyTileMateHaveTheToken (b : boolean) {
		didMyTileMateHaveTheToken = b
	}
	
	def getDidMyTileMateHaveTheToken {
		return this.didMyTileMateHaveTheToken
	}

	on EndAgent {
		killMe
	}
	
}

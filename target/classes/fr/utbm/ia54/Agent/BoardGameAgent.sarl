package fr.utbm.ia54.Agent

import io.sarl.core.Initialize
import io.sarl.core.Logging
import io.sarl.core.Lifecycle
import io.sarl.core.DefaultContextInteractions
import java.util.ArrayList
import java.util.List
import java.util.Collections
import fr.utbm.ia54.Event.FrameSet
import fr.utbm.ia54.Event.TileSet
import fr.utbm.ia54.Event.TokenReceived
import fr.utbm.ia54.Event.EndAgent
import io.sarl.util.Scopes
import fr.utbm.ia54.Event.TokenReleased
import io.sarl.core.Behaviors
import fr.utbm.ia54.gui.TaquinFxViewerController
import fr.utbm.taquin.events.ActionUI
import java.util.UUID
import fr.utbm.ia54.Class.CoordPair
import fr.utbm.ia54.Class.InfosFrame
import io.sarl.core.Schedules
import fr.utbm.ia54.Event.FindPathWithAstarAlgo
import fr.utbm.ia54.Event.UpdateGUI
import fr.utbm.ia54.Class.StaticVars

agent BoardGameAgent {
	uses Logging, Lifecycle, DefaultContextInteractions, Behaviors, Schedules
	
	var PROBLEM_SIZE = 3
	var nbFrameSet = new Integer(0)
	var nbTileSet = new Integer(0)
	var frameList = new ArrayList<FrameAgent>()
	
	var frameUUIDList = new ArrayList<UUID>()
	var listCoordPairsOfFrames = new ArrayList<CoordPair>()
	
	var openListOfFrames = new ArrayList<InfosFrame>()
	var closedListOfFrames = new ArrayList<InfosFrame>()

	// infos of the frame on which there is the Tile with the Token
	var haveTokenFrame : FrameAgent
	var haveTokenInfosFrame : InfosFrame
	var uuidFRAMEwithTokenTile : UUID
	var coordsFRAMEwithTokenTile : CoordPair
	
	// infos of the frame on which there is the BlankTile
	var arrivalFrame : FrameAgent
	var arrivalInfosFrame : InfosFrame
	var uuidFRAMEwithBlankTile : UUID
	var coordsFRAMEwithBlankTile : CoordPair
	
	// infos of the frame on which there is the beginningFrame (launcher of the A-star algorithm)
	var beginningFrame : FrameAgent
	var beginningInfosFrame : InfosFrame
	var uuidFRAMEbeginning : UUID
	var coordsFRAMEbeginning : CoordPair
	
	var blankTile : EmptyTileAgent
	var tileList = new ArrayList<TileAgent>()
	var tokenPriorityList = new ArrayList<ArrayList<TileAgent>>()

	var ctrl : TaquinFxViewerController
	
	var flagCorner = 0
	var isCorner = false
	var isDistributed = false
	var nbTriesAstarAlgo = 0
	var topCornersList = new ArrayList<Integer>()
	var bottomCornersList = new ArrayList<Integer>()
	
	on Initialize {

		loggingName = 'BoardGameAgent'

		
		PROBLEM_SIZE = StaticVars.problemSize
		ctrl = occurrence.parameters.get(1) as TaquinFxViewerController
		isDistributed = StaticVars.isDistributed

		val numFrameList : List<Integer> = new ArrayList

		for (var i = 1; i <= Math.pow(PROBLEM_SIZE, 2); i++)
			numFrameList.add(i)

		for (var i = 0; i <= Math.pow(PROBLEM_SIZE, 2) - 1; i++) { // spawn FrameAgent(num,row,col,size)
			frameUUIDList.add(spawn(FrameAgent, #[numFrameList.get(i), i / PROBLEM_SIZE, i % PROBLEM_SIZE])) // get UUID of the frameAgent
			listCoordPairsOfFrames.add(new CoordPair((i / PROBLEM_SIZE), (i % PROBLEM_SIZE)))
		}
		
		info("Board game has been set.")		
	}
 
	on FrameSet {
		
		synchronized (nbFrameSet) {
			nbFrameSet++
		
			frameList.add(occurrence.frame)
	
			// ouais c'est bon on est tous lÃ  !
			if (nbFrameSet === Math.round(Math.pow(PROBLEM_SIZE, 2)))
			{
				info("Every single FrameAgent is set. Spawning every single TileAgent.")
	
				// Detects error that randomly happens
				for (f : frameList) {
					if (f === null) {
						error("ERROR 1 : ONE OF THE FRAME RETURNED NULL POINTER")
						return
					}
	
				}
				
				// Ordering initial list of frame in order to set neighbours
				Collections.sort(frameList)[a, b|a.numFrame - b.numFrame]
				
				// Setting neighbours
				var c = 0
				for (f : frameList)
				{
					if (c % PROBLEM_SIZE != 0) // when true, the frame does have a west neighbour
						f.setWestNeighbour(frameList.get(c - 1).ID)
	
					if (c / PROBLEM_SIZE != 0) // when true, the frame does have a north neighbour
						f.setNorthNeighbour(frameList.get(c - PROBLEM_SIZE).ID)
	
					if (c + PROBLEM_SIZE < (PROBLEM_SIZE * PROBLEM_SIZE)) // when true, the frame does have a south neighbour
						f.setSouthNeighbour(frameList.get(c + PROBLEM_SIZE).ID)
	
					if (c % PROBLEM_SIZE != (PROBLEM_SIZE - 1)) // when true, the frame does have a east neighbour
						f.setEastNeighbour(frameList.get(c + 1).ID)
					
					c++
				}
				
				// Shuffle tile positions
				var startingTiles : List<Integer> = new ArrayList
				
				for (var i = 1; i < Math.pow(PROBLEM_SIZE, 2); i++)
					startingTiles.add(i)
	
				Collections.shuffle(startingTiles)
	
				info("Starting positions " + startingTiles)
	
				// COMMUNICATION AVEC UI
				// emit(new InitDone(startingTiles))
				ctrl.monTest(startingTiles);
				
				// Spawn tile agents (num tile/UUID frame/num frame/ problem size)
				for (var i = 0; i < Math.pow(PROBLEM_SIZE, 2) - 1; i++)
				{
					var id = spawn(TileAgent, #[startingTiles.get(i), frameList.get(i).ID, i])
					frameList.get(i).hostedTile = id
					frameList.get(i).hostedNumTile = startingTiles.get(i)
					frameList.get(i).isSatisfied = (startingTiles.get(i) === frameList.get(i).numFrame)
				}
				
				// Spawn blank tile
				var id = spawn(EmptyTileAgent,#[frameList.get(PROBLEM_SIZE * PROBLEM_SIZE - 1).ID, PROBLEM_SIZE * PROBLEM_SIZE])
				frameList.get(PROBLEM_SIZE*PROBLEM_SIZE - 1).hostedTile = id
				
				uuidFRAMEwithBlankTile = frameList.get(PROBLEM_SIZE * PROBLEM_SIZE - 1).ID
				coordsFRAMEwithBlankTile = frameList.get(PROBLEM_SIZE * PROBLEM_SIZE - 1).coordPair
				arrivalInfosFrame = new InfosFrame(uuidFRAMEwithBlankTile, coordsFRAMEwithBlankTile)
				arrivalFrame = frameList.get(PROBLEM_SIZE * PROBLEM_SIZE - 1)
				arrivalFrame.hostedNumTile = 0


				// diagonal only (last 3*3 included)
				for(var top=1; top<(PROBLEM_SIZE*PROBLEM_SIZE)-(PROBLEM_SIZE*2); top=top+PROBLEM_SIZE+1){
					topCornersList.add(top)
				}

				// corner bottom only (last 3*3 included)
				for(var bottom=(PROBLEM_SIZE*PROBLEM_SIZE)-(PROBLEM_SIZE-1); bottom<((PROBLEM_SIZE*PROBLEM_SIZE)-1); bottom++){
					bottomCornersList.add(bottom)
				}
			}
		}
	}
	
	on TileSet {
		
		synchronized (nbTileSet) {
			nbTileSet++
			
			// TileAgent spawned
			if (occurrence.tile !== null) // DO NOT REMOVE THIS TEST
				tileList.add(occurrence.tile)
			// EmptyTileAgent (blankTile) spawned
			else
				blankTile = occurrence.blank
	
			if (nbTileSet === Math.round(Math.pow(PROBLEM_SIZE, 2))) {
				info("Every single TileAgent is set. Setting token priority lists.")
	
				// Detects error that randomly happens
				for (t : tileList)
				{
					if (t === null)
					{
						error("ERROR 2 : ONE OF THE TILE RETURNED NULL POINTER")
						return
					}
	
				}
	
				// Ordering initial list by numTile to avoid later more complicated computation
				Collections.sort(tileList)[a, b|a.numTile - b.numTile]
						
				var tempList = new ArrayList<TileAgent>()
								
				// Setting token priority lists
				for (var i = 1; i < PROBLEM_SIZE; i++)
					tokenPriorityList.add(new ArrayList())
				
				// Put the tile in the right tokenPriority list
				for (t : tileList)
					tokenPriorityList.get(t.getTokenPriority).add(t)
	
				// Modify the sorting of each list
				for (l : tokenPriorityList)		
				{
					for (var tilesToSwitch = (l.size / 2) + 1; tilesToSwitch > 0 ; tilesToSwitch--)
					{
						tempList.add(l.get(0))
						l.remove(0)
					}
					
					while (!tempList.empty)
					{
						l.add(0, tempList.get(0))
						tempList.remove(0)
					}
					
					//for (t : l)
					//	info(t.numTile)
				}
	
				info("TokenPriorityList data set up.")
				
				// Sending the token
				wake(new TokenReleased)
			}
		}
	}

	on TokenReleased {
		
		// Self adapting timeout
		if (!occurrence.success)
		{
			StaticVars.timeout *= 2
		}
		else {
			StaticVars.timeout =  (0.9 * StaticVars.timeout) as int
			StaticVars.timeout += 1
		}
		
		info("Current timeout : " + StaticVars.timeout)
		
//		Thread.sleep(3000)
		for (t : tokenPriorityList.get(0))
		{
			if (t.isHappy) {
				for(ite: frameList){
					if(t.uuidFrameHost === ite.ID){
						//ite.isBlocked = true
						ite.didMyTileMateHaveTheToken = true
						ctrl.setColor("purple", t.numTile)
						break
					}
				}
			}
			else
			{
				break
			}
		}
		
		// Looking for the first unsatisfied tile on the first priority list
		do {
			for (t : tokenPriorityList.get(0))
			{
				if (!t.isHappy)
				{	
					// set the infosFrame for the frame on which there is the Tile with the Token
					for(var i=0; i<frameList.size; i++){
						if(frameList.get(i).hostedTile === t.ID){
							uuidFRAMEwithTokenTile = frameList.get(i).ID
							coordsFRAMEwithTokenTile = frameList.get(i).coordPair
							haveTokenInfosFrame = new InfosFrame(uuidFRAMEwithTokenTile, coordsFRAMEwithTokenTile)
							haveTokenFrame = frameList.get(i)
							break
						}
					}

					emit(new TokenReceived(), Scopes.addresses(defaultSpace.getAddress(t.ID)))
					return
				}
			}
			
			// Block all frames of the list before removing it
			for (t : tokenPriorityList.get(0))
			{
				for (f : frameList)
				{
					if (t.numTile === f.idNum)
					{
						f.isBlocked = true
						ctrl.setColor("orange", t.numTile)
						break
					}	
				}
			}
			
			// Remove the list
			tokenPriorityList.remove(0) 
			
			// It is over
			if (tokenPriorityList.empty)
			{
				error("PUZZLE SEEMS TO BE SOLVED ! Congratulations, you win!")
				return
			}
			// Else ... get to the next list by looping
			
			// Updating nbActiveNeighbours in new outside arc
			var firstCorner = tokenPriorityList.get(0).get((tokenPriorityList.get(0).size / 2)).numTile
			var secondCorner = tokenPriorityList.get(0).get(tokenPriorityList.get(0).size - 1).numTile
			
			for (f : frameList)
			{
				if (f.idNum === firstCorner)
					f.nbActiveNeighbours = 2

				if (f.idNum === secondCorner)
					f.nbActiveNeighbours = 2
			}
			
		} while (!tokenPriorityList.empty)
	}

	on ActionUI {
		ctrl.setColor(occurrence.prop, occurrence.target)
	}
	
	// calculate the Manhattan distance between 2 frames: return int: abs(xA-xB) + abs(yA-yB)
	def distManhattan(a : FrameAgent, b : FrameAgent) : int {
		return (Math.abs(a.XRow - b.XRow) + Math.abs(a.YCol - b.YCol))
	}
	
	// determinate if the frame is in the list: return boolean: true if the CoordPair correspond to coords of an FrameAgent in the list
	def isInFrameList(pair : CoordPair, listOfFrames : ArrayList<InfosFrame>) : boolean {
		for (fa : listOfFrames) {
			 if(pair.equals(fa.coordsCurrentFrame))
			 	return true
		}
		return false
	}

	def addOneNeighbourFrameImplements(currentFrame : FrameAgent, neighbour : UUID) {

		var index = frameUUIDList.indexOf(neighbour)
		var coordNeighbour = listCoordPairsOfFrames.get(index) // or: var coordNeighbour = frameList.get(index).coordPair

		// if doesn't exist in the closed list
		if (!isInFrameList(coordNeighbour, closedListOfFrames)) {

			// the treated frame (stock the infos)
			var infosFrame = new InfosFrame(neighbour, coordNeighbour)

			// costG of neighbour: cost of previous + distance to previous
			var indexForClosedList = -1
			for (iterator : closedListOfFrames) {
				indexForClosedList++
				if (iterator.uuidCurrentFrame == currentFrame.ID)
					break
			}

			infosFrame.costG = closedListOfFrames.get(indexForClosedList).costG +
				distManhattan(frameList.get(index), currentFrame)

			// costH of neighbour: it to arrival
			infosFrame.costH = distManhattan(frameList.get(index), arrivalFrame)
			infosFrame.costF = infosFrame.costG + infosFrame.costH

			// previousFrame = the previousFrame in the chain of aggression (to build the path in the opposite direction)
			infosFrame.uuidPreviousFrame = currentFrame.ID
			infosFrame.coordsPreviousFrame = currentFrame.coordPair

			var indexForOpenList = -1
			if (!openListOfFrames.empty) {
				for (iterator : openListOfFrames) {
					indexForOpenList++
					if (iterator.uuidCurrentFrame == neighbour)
						break
				}
			}
			// if(indexForOpenList > -1){
			
			// if already exists: compare the cost
			if (isInFrameList(coordNeighbour, openListOfFrames)) {
				// only if the new path is shorter: update it ELSE do nothing
				if ((indexForOpenList > -1) && (infosFrame.costF < openListOfFrames.get(indexForOpenList).costF))
					openListOfFrames.set(indexForOpenList, infosFrame)

			} // the treated frame is not in the openList yet: add it
			else {
				openListOfFrames.add(infosFrame)
			}
			// }
		}
	}

	def addOneNeighbourFrame(currentFrame : FrameAgent, neighbour : UUID) {
		var index = frameUUIDList.indexOf(neighbour)

		// not satisfied AND not blocked AND not the FRAMEwithTokenTile
		if ((flagCorner == 0) &&
			(!frameList.get(index).didMyTileMateHaveTheToken ||
			!frameList.get(index).isSatisfied) && 
			!frameList.get(index).isBlocked &&
			(frameList.get(index).ID != uuidFRAMEwithTokenTile)) {

			addOneNeighbourFrameImplements(currentFrame, neighbour)
		}

		else if ((flagCorner == 1) &&
			!frameList.get(index).isSatisfied &&
			!frameList.get(index).isBlocked &&
			(frameList.get(index).ID != uuidFRAMEwithTokenTile)) {
			
			addOneNeighbourFrameImplements(currentFrame, neighbour)
		}

		else if ((flagCorner == 2) &&
			!frameList.get(index).didMyTileMateHaveTheToken &&
			// !frameList.get(index).isSatisfied &&
			!frameList.get(index).isBlocked &&
			(frameList.get(index).ID != uuidFRAMEwithTokenTile)) {
			
			addOneNeighbourFrameImplements(currentFrame, neighbour)
		}
	}
	
	//add the neighbour's frames of the current frame
	def addNeighbourFrames(currentFrame : FrameAgent) { 
		if (currentFrame.southNeighbour != null) {
			addOneNeighbourFrame(currentFrame, currentFrame.southNeighbour)
		}
		if(currentFrame.northNeighbour != null){
			addOneNeighbourFrame(currentFrame, currentFrame.northNeighbour)
		}
		if (currentFrame.westNeighbour != null) {
			addOneNeighbourFrame(currentFrame, currentFrame.westNeighbour)
		}
		if (currentFrame.eastNeighbour != null) {
			addOneNeighbourFrame(currentFrame, currentFrame.eastNeighbour)
		}
	}
	
	// get the frame with best cost from the frameList
	def getBestFrame(listFrames : ArrayList<InfosFrame>) : InfosFrame {
		if(!listFrames.empty){ // the list is not empty
			var costF = listFrames.get(0).costF
			var infoFrame = listFrames.get(0)
			
			for(frame : listFrames){
				if(frame.costF < costF){ // get the lower cost in the list
					costF = frame.costF
					infoFrame = frame
				}
			}
			return infoFrame
		}
		
		return null		
	}
	
	// get the frame with best cost from the frameList : FOR CORNER
	def getBestFrameForCorner(listFrames : ArrayList<InfosFrame>) : InfosFrame {
		if(!listFrames.empty){ // the list is not empty
			var costF = listFrames.get(0).costF
			var infoFrame = listFrames.get(0)
			
			for(frame : listFrames){
				for(l: frameList){
					if(l.ID === frame.uuidCurrentFrame){
						if(l.isBlocked){
							return frame
						}
					}
				}
				if(frame.costF < costF){ // get the lower cost in the list
					costF = frame.costF
					infoFrame = frame
				}
			}
			return infoFrame
		}
		
		return null		
	}
	
	//add the InfosFrame in the closedList and remove it from the openList
	def addInClosedList(coords : CoordPair){
		var index = -1
		for(ite : openListOfFrames){
			index++
			if(ite.coordsCurrentFrame.equals(coords)){ // found it in the openList
				closedListOfFrames.add(ite) 	// add in the closedList
				break
			}				
		}
		openListOfFrames.remove(index) // remove it from the openList
	}
	
	//get the chain of aggression in a list of InfosFrame: return ArrayList<InfosFrame>: the list of InfosFrame for the aggression in the right order
	def buildChainAggression(beginningFrame : InfosFrame) : ArrayList<InfosFrame> {
		var chain = new ArrayList<InfosFrame>
		var index = closedListOfFrames.size-1
		var tmpFrame : InfosFrame
		var prevFrame : InfosFrame
		var flagEnd = false
		
		// the last one is the arrivalFrame
		tmpFrame = closedListOfFrames.get(index)
		chain.add(tmpFrame)
		
		// get the previousFrame of the first one
		prevFrame = new InfosFrame(tmpFrame.uuidPreviousFrame,tmpFrame.coordsPreviousFrame)
				
		// loop with each previousFrame of the currentFrame treated
		while(!prevFrame.equals(beginningFrame)){		
			chain.add(prevFrame)
			
			var i = -1
			for(ite : closedListOfFrames){
				
				// the end
				if(tmpFrame.coordsPreviousFrame==null){ 
					flagEnd = true
					break	
				}
					
				i++
				if(ite.coordsCurrentFrame.equals(tmpFrame.coordsPreviousFrame))
					break
			}
			
			// looping on the closedList
			if(!flagEnd){
				tmpFrame = closedListOfFrames.get(i)
				prevFrame = new InfosFrame(closedListOfFrames.get(i).uuidCurrentFrame, closedListOfFrames.get(i).coordsCurrentFrame)
			}
			
			// the end of the loop
			else break
		}
		
		return chain
	}

	def changeSatisfaction {

		for (var i = 0; i < frameList.size - 1; i++) {
			if (frameList.get(i).idNum === frameList.get(i).hostedNumTile) {
				frameList.get(i).isSatisfied = true
			} else {
				frameList.get(i).isSatisfied = false
			}
		}

		for (iteTile : tileList) {
			if (iteTile.numTile === iteTile.numFrameHost) {
				iteTile.setIsHappy(true)
			} else {
				iteTile.setIsHappy(false)
			}
		}
	}

	// Execute A* algorithm
	def findPath {
		var currentFrame = beginningInfosFrame
		openListOfFrames.add(beginningInfosFrame)
		addInClosedList(beginningInfosFrame.coordsCurrentFrame)
		
		// add the neighbours (of the first frame) in the openList
		for (var indexOfFrameList = 0; indexOfFrameList < frameList.size; indexOfFrameList++){
			if (frameList.get(indexOfFrameList).coordPair.equals(beginningInfosFrame.coordsCurrentFrame)){
				addNeighbourFrames(frameList.get(indexOfFrameList))
				break
			}
		}
				
		// until the destination has been reached && openList is empty
		while(!currentFrame.coordsCurrentFrame.equals(arrivalInfosFrame.coordsCurrentFrame) && !openListOfFrames.empty){
			currentFrame = getBestFrame(openListOfFrames)
			addInClosedList(currentFrame.coordsCurrentFrame)

			// add the neighbours (of the other frames) in the openList
			for (var indexOfFrameList2 = 0; indexOfFrameList2 < frameList.size; indexOfFrameList2++){
				if (frameList.get(indexOfFrameList2).coordPair.equals(currentFrame.coordsCurrentFrame)) {
					addNeighbourFrames(frameList.get(indexOfFrameList2))
					break
				}
			}	
		}
		 
		if(!isCorner && (flagCorner < 2)){
			// if destination is reached : build the path in the opposite direction of the chain of aggression
			if(currentFrame.coordsCurrentFrame.equals(arrivalInfosFrame.coordsCurrentFrame)){
				nbTriesAstarAlgo = 0
				info("## A-star findPath : destination IS reached! ##")	
				doSwaps(null)
				flagCorner = 0 // not a corner anymore
				emit(new TokenReleased)
			} else {
				nbTriesAstarAlgo ++
				info("## A-star findPath : destination IS NOT reached! ("+nbTriesAstarAlgo+") ##")
				
				if (nbTriesAstarAlgo < 2) {
					for(ite: frameList){
						if(ite.ID === currentFrame.uuidCurrentFrame){
							error("CURRENTtile="+ite.hostedNumTile)
							ctrl.setColor("turquoise", ite.hostedNumTile)
							Thread.sleep(StaticVars.speed)
							break
						}
					}
					emit (new TokenReleased())
				}
				else{
					doSwapsForCorner(currentFrame)
				}
			}	
		}

		// the top right corner of the 3x3 square
		else if(!isCorner && (flagCorner == 2)){
			info("## A-star findPath : top right corner of 3x3 ##")
			doSwapsForTopRightCornerThreeByThree
		}
	}

	def whichCorner(currentFrame : InfosFrame) : int {

		// top corner
		if(topCornersList.contains(currentFrame.numFrame)){
			return 1
		}
		// bottom corner
		else if (bottomCornersList.contains(currentFrame.numFrame)) {
			// this is the bottom corner of the 3*3 square
			if(bottomCornersList.get(bottomCornersList.size-1) == currentFrame.numFrame)
				return 3
			else
				return 2
		}
		
		return 0
	}

	def buildChainAggressionForCorner(currentInfosFrame: InfosFrame, firstNeighbourInfosFrame: InfosFrame,
		secondNeighbourInfosFrame: InfosFrame, thirdNeighbourInfosFrame: InfosFrame) : ArrayList<InfosFrame> {

		// sort in the opposite order AND remove duplicate frames
		var tmpChainAggression = buildChainAggression(beginningInfosFrame)
		var tmpFrame = tmpChainAggression.get(tmpChainAggression.size - 1)
		var chainAggression = new ArrayList<InfosFrame>
		chainAggression.add(tmpFrame)
		for (var i=tmpChainAggression.size-2; i>=0; i--) {
			if (!(tmpFrame.uuidCurrentFrame === tmpChainAggression.get(i).uuidCurrentFrame)) {
				tmpFrame = tmpChainAggression.get(i)
				chainAggression.add(tmpFrame)
			}				
		}

		 // if exists : add the third neighbour, then the second (for the bottom corner of 3x3 square)
		 if(thirdNeighbourInfosFrame != null)	chainAggression.add(0, thirdNeighbourInfosFrame)
		 if(secondNeighbourInfosFrame != null)	chainAggression.add(0, secondNeighbourInfosFrame)
		 	

		// add the first neighbour, then the current
		chainAggression.add(0, firstNeighbourInfosFrame)
		chainAggression.add(0, currentInfosFrame)

		return chainAggression
	}

	def doSwapsForTopRightCornerThreeByThree {

		var currentFrame : FrameAgent
		for(ite: frameList){
			if(ite.idNum === (PROBLEM_SIZE*PROBLEM_SIZE) - (PROBLEM_SIZE*2)){
				currentFrame = ite
				break
			}
		}

		var currentInfosFrame = new InfosFrame(currentFrame.ID, currentFrame.coordPair)
		currentInfosFrame.numFrame = currentFrame.idNum

		// first westNeighbour
		var firstNeighbourUUID = currentFrame.westNeighbour
		var firstNeighbourInfosFrame = new InfosFrame(firstNeighbourUUID,
			new CoordPair(currentFrame.coordPair.x, currentFrame.coordPair.y))
		firstNeighbourInfosFrame.coordsCurrentFrame.setYminusOne
		var firstNeighbourFrame : FrameAgent
		for (ite : frameList) {
			if (ite.ID === firstNeighbourUUID) {
				firstNeighbourFrame = ite
				break
			}
		}

		// second westNeigbour
		var secondNeighbourUUID = firstNeighbourFrame.westNeighbour
		var secondNeighbourInfosFrame = new InfosFrame(secondNeighbourUUID,
			new CoordPair(firstNeighbourFrame.coordPair.x, firstNeighbourFrame.coordPair.y))
		secondNeighbourInfosFrame.coordsCurrentFrame.setYminusOne
		var secondNeighbourFrame : FrameAgent
		for (ite : frameList) {
			if (ite.ID === secondNeighbourUUID) {
				secondNeighbourFrame = ite
				break
			}
		}
						
		// first southNeighbour
		var thirdNeighbourUUID = secondNeighbourFrame.southNeighbour
		var thirdNeighbourInfosFrame = new InfosFrame(thirdNeighbourUUID, 
			new CoordPair(secondNeighbourFrame.coordPair.x, secondNeighbourFrame.coordPair.y))
		thirdNeighbourInfosFrame.coordsCurrentFrame.setXplusOne
		var thirdNeighbourFrame : FrameAgent
		for(ite: frameList){
			if(ite.ID === thirdNeighbourUUID){
				thirdNeighbourFrame = ite
				break
			}
		}  

		isCorner = true
		initBeginningInfosFrame(thirdNeighbourFrame.idNum, thirdNeighbourUUID, thirdNeighbourFrame.coordPair)
		findPath
		var newChainAggression = buildChainAggressionForCorner(currentInfosFrame, 
			firstNeighbourInfosFrame, secondNeighbourInfosFrame, null)

		doSwaps(newChainAggression)
		flagCorner = 0
		emit(new TokenReleased)
	}

	def doSwapsForCorner(currentInfosFrame : InfosFrame) {
		
		var currentFrame : FrameAgent
		for(ite: frameList){
			if(ite.ID === currentInfosFrame.uuidCurrentFrame){
				currentFrame = ite
				currentInfosFrame.numFrame = ite.numFrame
				break
			}
		}
		var whichCorner = whichCorner(currentInfosFrame)

		if(whichCorner > 0){
			
			isCorner = true
			
			// top corner
			if(whichCorner == 1){
				// info("THIS IS THE TOP CORNER")
				
				// first eastNeighbour
				var firstNeighbourUUID = currentFrame.eastNeighbour
				var firstNeighbourInfosFrame = new InfosFrame(firstNeighbourUUID, 
					new CoordPair(currentInfosFrame.coordsCurrentFrame.x, currentInfosFrame.coordsCurrentFrame.y))
				firstNeighbourInfosFrame.coordsCurrentFrame.setYplusOne
				var firstNeighbourFrame : FrameAgent
				for(ite: frameList){
					if(ite.ID === firstNeighbourUUID){
						firstNeighbourFrame = ite
						break
					}
				}  
				 
				// second eastNeigbour
				var secondNeighbourUUID = firstNeighbourFrame.eastNeighbour
				var secondNeighbourInfosFrame = new InfosFrame(secondNeighbourUUID, 
					new CoordPair(firstNeighbourFrame.coordPair.x, firstNeighbourFrame.coordPair.y))
				secondNeighbourInfosFrame.coordsCurrentFrame.setYplusOne 
				var secondNeighbourFrame : FrameAgent
				for(ite: frameList){
					if(ite.ID === secondNeighbourUUID){
						secondNeighbourFrame = ite
						break
					}
				}
				
				initBeginningInfosFrame(secondNeighbourFrame.idNum, secondNeighbourUUID, secondNeighbourFrame.coordPair)
				findPath
				var newChainAggression = buildChainAggressionForCorner(currentInfosFrame, firstNeighbourInfosFrame, null, null)

				doSwaps(newChainAggression)
				in(1000)[emit(new TokenReleased)]
			}

			// bottom corner of 4*4 square (or more)
			else if(whichCorner == 2){
				// info("THIS IS THE BOTTOM CORNER")

				// first northNeighbour
				var firstNeighbourUUID = currentFrame.northNeighbour
				var firstNeighbourInfosFrame = new InfosFrame(firstNeighbourUUID, 
					new CoordPair(currentInfosFrame.coordsCurrentFrame.x, currentInfosFrame.coordsCurrentFrame.y))
				firstNeighbourInfosFrame.coordsCurrentFrame.setXminusOne
				var firstNeighbourFrame : FrameAgent
				for(ite: frameList){
					if(ite.ID === firstNeighbourUUID){
						firstNeighbourFrame = ite
						break
					}
				} 
				
				// second northNeigbour
				var secondNeighbourUUID = firstNeighbourFrame.northNeighbour
				var secondNeighbourInfosFrame = new InfosFrame(secondNeighbourUUID, 
					new CoordPair(firstNeighbourFrame.coordPair.x, firstNeighbourFrame.coordPair.y))
				secondNeighbourInfosFrame.coordsCurrentFrame.setXminusOne 
				var secondNeighbourFrame : FrameAgent
				for(ite: frameList){
					if(ite.ID === secondNeighbourUUID){
						secondNeighbourFrame = ite
						break
					}
				}
				
				initBeginningInfosFrame(secondNeighbourFrame.idNum, secondNeighbourUUID, secondNeighbourFrame.coordPair)
				findPath
				var newChainAggression = buildChainAggressionForCorner(currentInfosFrame, firstNeighbourInfosFrame, null, null)

				for(ite: newChainAggression){
					info("newChain= "+ite.coordsCurrentFrame.toString)
				}

				doSwaps(newChainAggression)
				flagCorner = 1 // a bottom corner
				emit(new TokenReleased)
			}

			// bottom corner of 3*3 square
			else if(whichCorner == 3){
				// info("THIS IS THE BOTTOM CORNER OF 3*3 SQUARE")

				// first northNeighbour
				var firstNeighbourUUID = currentFrame.northNeighbour
				var firstNeighbourInfosFrame = new InfosFrame(firstNeighbourUUID,
					new CoordPair(currentInfosFrame.coordsCurrentFrame.x, currentInfosFrame.coordsCurrentFrame.y))
				firstNeighbourInfosFrame.coordsCurrentFrame.setXminusOne
				var firstNeighbourFrame : FrameAgent
				for (ite : frameList) {
					if (ite.ID === firstNeighbourUUID) {
						firstNeighbourFrame = ite
						break
					}
				}

				// second northNeigbour
				var secondNeighbourUUID = firstNeighbourFrame.northNeighbour
				var secondNeighbourInfosFrame = new InfosFrame(secondNeighbourUUID,
					new CoordPair(firstNeighbourFrame.coordPair.x, firstNeighbourFrame.coordPair.y))
				secondNeighbourInfosFrame.coordsCurrentFrame.setXminusOne
				var secondNeighbourFrame : FrameAgent
				for (ite : frameList) {
					if (ite.ID === secondNeighbourUUID) {
						secondNeighbourFrame = ite
						break
					}
				}
								
				// first eastNeighbour
				var thirdNeighbourUUID = secondNeighbourFrame.eastNeighbour
				var thirdNeighbourInfosFrame = new InfosFrame(thirdNeighbourUUID, 
					new CoordPair(secondNeighbourFrame.coordPair.x, secondNeighbourFrame.coordPair.y))
				thirdNeighbourInfosFrame.coordsCurrentFrame.setYplusOne
				var thirdNeighbourFrame : FrameAgent
				for(ite: frameList){
					if(ite.ID === thirdNeighbourUUID){
						thirdNeighbourFrame = ite
						break
					}
				}  
				 
				// second eastNeigbour
				var fourthNeighbourUUID = thirdNeighbourFrame.eastNeighbour
				var fourthNeighbourInfosFrame = new InfosFrame(fourthNeighbourUUID, 
					new CoordPair(thirdNeighbourFrame.coordPair.x, thirdNeighbourFrame.coordPair.y))
				fourthNeighbourInfosFrame.coordsCurrentFrame.setYplusOne 
				var fourthNeighbourFrame : FrameAgent
				for(ite: frameList){
					if(ite.ID === fourthNeighbourUUID){
						fourthNeighbourFrame = ite
						break
					}
				}

				initBeginningInfosFrame(fourthNeighbourFrame.idNum, fourthNeighbourUUID, fourthNeighbourFrame.coordPair)
				findPath
				var newChainAggression = buildChainAggressionForCorner(currentInfosFrame, 
					firstNeighbourInfosFrame, secondNeighbourInfosFrame, thirdNeighbourInfosFrame)

				doSwaps(newChainAggression)

				// cheat because the bottom right corner is not set even if it's the good place
				for(ite: frameList){
					if(ite.idNum == (PROBLEM_SIZE*PROBLEM_SIZE) - 2){
						ite.didMyTileMateHaveTheToken = true
						ite.isSatisfied = true

						for(tile: tileList){
							if(tile.numFrameHost == ite.idNum){
								tile.isHappy = true
							}
						}
					}
				}

				changeSatisfaction
				flagCorner = 2 // the top right corner of 3*3

				emit(new TokenReleased)

			}
		}

		// whichCorner == 0
		else{
			error("Sorry.. You lose! Try again. =D")
		}
	}
	
	//================================================================================================================================
	def doSwaps(chain : ArrayList<InfosFrame>) {

		var chainAggression : ArrayList<InfosFrame>

		if(!isCorner){
			// sort in the opposite order AND remove duplicate frames
			var tmpChainAggression = buildChainAggression(beginningInfosFrame)
			var tmpFrame = tmpChainAggression.get(tmpChainAggression.size - 1)
			chainAggression = new ArrayList<InfosFrame>
			chainAggression.add(tmpFrame)
			for (var i=tmpChainAggression.size-2; i>=0; i--) {
				if (!(tmpFrame.uuidCurrentFrame === tmpChainAggression.get(i).uuidCurrentFrame)) {
					tmpFrame = tmpChainAggression.get(i)
					chainAggression.add(tmpFrame)
				}				
			}
		}
		
		else{
			chainAggression = chain
		}
		
		// YB
		var listSwap : ArrayList<Integer> = new ArrayList()
		
		// info("---- Chain of aggression below ----")
		for(var i=0; i<chainAggression.size; i++){
			
			//Frame with the Tile which wants to move 
			if (chainAggression.get(i).coordsCurrentFrame.equals(beginningFrame.coordPair)) {

				// info("BeginningFrame= " + chainAggression.get(i).coordsCurrentFrame.toString)
				
				for (var j = 0; j < frameList.size; j++) {
					if (frameList.get(j).ID === chainAggression.get(i).uuidCurrentFrame) {

						listSwap.add(frameList.get(j).hostedNumTile)
						ctrl.setColor("green", frameList.get(j).hostedNumTile)
						Thread.sleep(StaticVars.speed)

						break
					}
				}
			}
			
			// colorize the chain of aggression (NOT the extremities)
			else if (!chainAggression.get(i).coordsCurrentFrame.equals(arrivalFrame.coordPair)) {

				// info("Frame"+(i + 1) + "= " + chainAggression.get(i).coordsCurrentFrame.toString)
				
				for(var j=0; j<frameList.size; j++){
					if (frameList.get(j).ID === chainAggression.get(i).uuidCurrentFrame) {

						listSwap.add(frameList.get(j).hostedNumTile)						
						ctrl.setColor("blue", frameList.get(j).hostedNumTile)
						Thread.sleep(StaticVars.speed)
						
						break
					}
				}
			}
			else {
				// info("ArrivalFrame= " + chainAggression.get(i).coordsCurrentFrame.toString)
			}
		}
		
//		Thread.sleep(StaticVars.speed)

		// YB
		Collections.reverse(listSwap)
		for (number : listSwap) {
			ctrl.swap(number)
			Thread.sleep(StaticVars.speed)
		}
		
		ctrl.swap(haveTokenFrame.hostedNumTile)
		
		// swap tiles in the chain of aggression (ex: 12345 --> 51234)
		swapTilesInChainAggression(chainAggression)
		swapTokenAndBlank
		
		resetAllObjects
		
		if(isCorner){
			isCorner = false
		}
	}
	//================================================================================================================================
	
	// reset/clear/remove every objects used previously (TODO: add every others if necessary)
	def resetAllObjects {
		openListOfFrames.clear
		closedListOfFrames.clear
		ctrl.reset
	}
	
	// receive the event to execute the algo A*
	on FindPathWithAstarAlgo {
		uuidFRAMEbeginning = occurrence.beginningFrame
		
		for(var i=0; i<frameList.size; i++){
			if(frameList.get(i).ID === uuidFRAMEbeginning){
				beginningFrame = frameList.get(i)
				coordsFRAMEbeginning = frameList.get(i).coordPair
				var infosFrame = new InfosFrame(uuidFRAMEbeginning, coordsFRAMEbeginning) 
				beginningInfosFrame = infosFrame
				break
			}
		}

		// there is a path
		if(beginningFrame.ID != arrivalFrame.ID){
			// TODO: NOT PRECISE AT ALL : more delay if bigger size
			if (PROBLEM_SIZE < 10)
				in(400 * PROBLEM_SIZE)[findPath]
			else
				in(600 * PROBLEM_SIZE)[findPath]				
		}

		// we just have to swap the FrameWithTokenTile and the FrameWithBlankTile because beginningFrame==arrivalFrame
		else {

			ctrl.swap(haveTokenFrame.hostedNumTile)
			swapTokenAndBlank
			
			emit(new TokenReleased)
			
		}
	}
	

	def swapTokenAndBlank {
		// tiles ----------------------------------------------------------
		var tmpTOKENtileUuid : UUID
		var tmpTOKENtileNum : int
		var tmpBLANKtileUuid : UUID
		var tmpBLANKtileNum : int 
		var tokenTile : TileAgent

		for (var i = 0; i < tileList.size; i++) {
			if (tileList.get(i).uuidFrameHost === haveTokenFrame.ID) {
				tokenTile = tileList.get(i)
				tmpTOKENtileUuid = tileList.get(i).uuidFrameHost
				tmpTOKENtileNum = tileList.get(i).numFrameHost
			} 
		}
		
		// for blankTile (arrivalFrame)
		tmpBLANKtileUuid = blankTile.uuidFrameHost
		tmpBLANKtileNum = blankTile.numFrameHost
		tokenTile.uuidFrameHost = tmpBLANKtileUuid
		tokenTile.numFrameHost = tmpBLANKtileNum
		tokenTile.numFrameHostFromZero = tokenTile.numFrameHost-1
		blankTile.uuidFrameHost = tmpTOKENtileUuid
		blankTile.numFrameHost = tmpTOKENtileNum
		
		// frames ---------------------------------------------------------
		initArrivalInfosFrame(haveTokenFrame.numFrame, haveTokenFrame.ID, haveTokenFrame.coordPair) // reset arrivalInfosFrame
		initBeginningInfosFrame(arrivalFrame.numFrame, arrivalFrame.ID, arrivalFrame.coordPair) // reset arrivalInfosFrame
		var tmpF = haveTokenFrame
		haveTokenFrame = arrivalFrame
		arrivalFrame = tmpF
		var tmpHostedTile = haveTokenFrame.hostedTile
		var tmpHostedNumTile = haveTokenFrame.hostedNumTile
		haveTokenFrame.hostedTile = arrivalFrame.hostedTile
		haveTokenFrame.hostedNumTile = arrivalFrame.hostedNumTile
		arrivalFrame.hostedTile = tmpHostedTile
		arrivalFrame.hostedNumTile = tmpHostedNumTile
		

		// if you want to LOG
		/*info(" ")
		info("=============== swapTokenAndBlank ===============")		
		info("---------- Infos FRAMES for numTile/uuidTile after the swap ----------")
		info("haveTokenFrame: idNum=" + haveTokenFrame.idNum + " /numHostedTile=" + haveTokenFrame.hostedNumTile)
		info("arrivalFrame: idNum=" + arrivalFrame.idNum + " /numHostedTile=" + arrivalFrame.hostedNumTile)
		for (var n = 0; n < frameList.size; n++) {
			for (ite : frameList) {
				if (ite.idNum === n + 1) {
					info("frame[" + (n + 1) + "]= tile: " + ite.hostedNumTile + " / " + ite.hostedTile)
				}
			}
		}
		info("---------- Infos TILES for numFrame/uuidFrame after the swap ----------")
		info("tile[0]= frame: " + blankTile.numFrameHost + " /" + blankTile.uuidFrameHost)
		for (var n = 0; n < tileList.size; n++) {
			for (ite : tileList) {
				if (ite.numTile === n + 1) {
					info("tile[" + (n + 1) + "]= frame: " + ite.numFrameHost + " / " + ite.uuidFrameHost 
						+" /framehostfromzero=" + ite.numFrameHostFromZero + " /numTileFromZero=" +
						ite.numTileFromZero)
				}
			}
		}
		info("------------------------------------------------------------------")*/ 
				
		changeSatisfaction
	}
	
	def initArrivalInfosFrame(num: int, uuid: UUID, coord: CoordPair){
		arrivalInfosFrame = new InfosFrame(uuid, coord)
		arrivalInfosFrame.numFrame = num
	}

	def initBeginningInfosFrame(num : int, uuid : UUID, coord : CoordPair) {
		beginningInfosFrame = new InfosFrame(uuid, coord)
		beginningInfosFrame.numFrame = num
	}
	
	// swap all tiles in the chain of aggression (ex: 12345 --> 51234)
	def swapTilesInChainAggression(chainAggression : ArrayList<InfosFrame>){
		var tmpFRAMEuuidHostedTile : UUID
		var tmpFRAMEnumHostedTile : int
		var tmpTILEuuidFrameHost : UUID
		var tmpTILEnumFrameHost : int
		var tmp1 : UUID 	// tile.uuidFrameHost
		var tmp2 : int		// tile.numFrameHost
		var tmp11 : UUID	// same
		var tmp22 : int		// same
		 
		// browse the chain of aggression in the opposite direction 
		for(var i=chainAggression.size-1; i>=0; i--){
			
			// search the corresponded FRAME of the current element in chainAggression
			for(var j=0; j<frameList.size; j++){
				if(frameList.get(j).ID === chainAggression.get(i).uuidCurrentFrame){
					
					var tmpBlankTile : EmptyTileAgent
					var tmpTile : TileAgent
					for(var iTile=0; iTile<tileList.size; iTile++){
						if(tileList.get(iTile).ID === frameList.get(j).hostedTile){
							tmpTile = tileList.get(iTile)
							break		
						}
					}
							
					// the first operation to do : save the infos of the last element in chainAggression
					if(i == chainAggression.size-1){
						tmpFRAMEuuidHostedTile = frameList.get(j).hostedTile
						tmpFRAMEnumHostedTile = frameList.get(j).hostedNumTile 
						tmpTILEuuidFrameHost = blankTile.uuidFrameHost
						tmpTILEnumFrameHost = blankTile.numFrameHost
					}
					
					// the intermediates operations to do for elements 0<i<=N in chainAggression 
					if (i > 0) {
						// search the FRAME corresponding to the index (i-1) for the loop
						for(var k=0; k<frameList.size; k++){
							if (frameList.get(k).ID === chainAggression.get(i - 1).uuidCurrentFrame) {
								
								for(var jTile=0; jTile<tileList.size; jTile++){
									if (tileList.get(jTile).ID === frameList.get(k).hostedTile) {
										tmp1 = tileList.get(jTile).uuidFrameHost
										tmp2 = tileList.get(jTile).numFrameHost
																				
										// first element
										if(i==chainAggression.size-1){
											tmp11 = tileList.get(jTile).uuidFrameHost
											tmp22 = tileList.get(jTile).numFrameHost
											tileList.get(jTile).uuidFrameHost = blankTile.uuidFrameHost
											tileList.get(jTile).numFrameHost = blankTile.numFrameHost
											tileList.get(jTile).numFrameHostFromZero = blankTile.numFrameHost-1
										}
										// others
										else {
											tileList.get(jTile).uuidFrameHost = tmp11
											tileList.get(jTile).numFrameHost = tmp22
											tileList.get(jTile).numFrameHostFromZero = tileList.get(jTile).numFrameHost-1
											tmp11 = tmp1
											tmp22 = tmp2
										}
										break
									}
								}
								
								frameList.get(j).hostedTile = frameList.get(k).hostedTile
								frameList.get(j).hostedNumTile = frameList.get(k).hostedNumTile
								break
							}
						}
					}
					
					// the last operation to do : use the previously saved infos for the element O in chainAggression
					else {						
						frameList.get(j).hostedTile = blankTile.ID
						frameList.get(j).hostedNumTile = blankTile.numTile
						blankTile.uuidFrameHost = frameList.get(j).ID
						blankTile.numFrameHost = frameList.get(j).idNum
						arrivalFrame = frameList.get(j)
					}				
				}				
			}
		}
		
		// if you want to LOG
		/*info("---------- Infos FRAMES for numTile/uuidTile after the swap ----------")
		info("arrivalFrame= " + arrivalFrame.idNum + " / " + arrivalFrame.ID)
		for(var n=0; n<frameList.size; n++){
			for(ite: frameList){
				if(ite.idNum === n+1){
					info("frame["+(n+1)+"]= tile: "+ite.hostedNumTile+" / "+ite.hostedTile)
				}
			}
		}

		info("---------- Infos TILES for numFrame/uuidFrame after the swap ----------")
		info("tile[0]= frame: "+blankTile.numFrameHost + " /" + blankTile.uuidFrameHost)
		for (var n = 0; n < tileList.size; n++) {
			for (ite : tileList) {
				if (ite.numTile === n + 1) {
					info("tile[" + (n + 1) + "]= frame: " + ite.numFrameHost + " / " + ite.uuidFrameHost)
				}
			}
		}
		info("------------------------------------------------------------------")*/
		
		changeSatisfaction
	}
	
	on UpdateGUI {
		for (number : occurrence.frameList) {
			//info("UpdateGUI: LIST: "+number.hostedNumTile)
			ctrl.swap(number.hostedNumTile)
			Thread.sleep(StaticVars.speed)
		}
		//info("UpdateGUI: SIMPLE: "+occurrence.numFrame)

		// Graphical update is done, releasing token
		emit (new TokenReleased())

	}

	on EndAgent {
		info("I kill myself! R.I.P")
		killMe
	}
	
}

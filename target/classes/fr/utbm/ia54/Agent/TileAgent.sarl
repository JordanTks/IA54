/** 
 * 
 */
package fr.utbm.ia54.Agent

import io.sarl.core.AgentKilled
import io.sarl.core.AgentSpawned
import io.sarl.core.ContextJoined
import io.sarl.core.ContextLeft
import io.sarl.core.Destroy
import io.sarl.core.Initialize
import io.sarl.core.Logging
import io.sarl.core.MemberJoined
import io.sarl.core.MemberLeft
import fr.utbm.ia54.Event.TileSet
import io.sarl.core.DefaultContextInteractions
import fr.utbm.ia54.Event.TokenReceived
import fr.utbm.ia54.Event.Assault
import fr.utbm.ia54.Event.TokenReleased

/** 
 * @author Norgannon
 * 
 */
agent TileAgent {
	uses Logging, DefaultContextInteractions

	var pleased = false // at right place or no           (though kind of redundant with bool pleasant on frameAgent (could be useless)) 
	var angry = false // currently assaulting someone or not
	var numTile : int
	var numframeHost : int
	var problemSize : int
	var tokenPriority : int
	
	on Initialize {

		numTile = occurrence.parameters.get(0) as Integer
		numframeHost = occurrence.parameters.get(1) as Integer
		problemSize = occurrence.parameters.get(2) as Integer

		// Setting tokenPriority consulted by the scheduler
		tokenPriority = Math.min((numTile-1) / problemSize, (numTile-1) % problemSize)

		loggingName = 'TileAgent' + numTile // num to change
		
		if(numTile == numframeHost) pleased = true;

		emit(new TileSet(this))
		
		info("Agent is set up.")
	}
	
	on TokenReceived {
		
		info("I received the token.")
		
		if (pleased) {
			emit(new TokenReleased())
		
		}else {
			emit(new Assault(1,2))
		}

			// si (mon_etat = agressé)
		// j'agresse un voisin pour fuir
		
			// sinon si (mon_humeur = satisfait)
		// je transmet le token gratuitement à quelqu'un sans l'agresser
		
			// sinon si (mon_humeur = non_satisfait)
		// j'agresse un voisin pour accroitre ma satisfaction
		
	}

	def getTokenPriority : int  {
		this.tokenPriority
	}

	on Destroy {
		// Event trigger when the agent is destroyed from the system.
		// You should put all the resource releasing statements in this block of code.
		info("The agent was stopped.")
	}

	on AgentSpawned {
		// A new agent has been spawned in our context.
	}

	on AgentKilled {
		// A new agent has been killed in our context.
	}

	on ContextJoined {
		// Event trigger when an agent of the level joins a shared context.
		// Sent to a agent of the same level.
	}

	on ContextLeft {
		// Event trigger when an agent of the level jleaves a shared context.
		// Sent to a agent of the same level.
	}

	on MemberJoined {
		// Event trigger when an agent joins one of our shared super-holons.
		// Sent to all members of the considered super-holon.
	}

	on MemberLeft {
		// Event trigger when an agent leaves one of our shared super-holons.
		// Sent to all members of the considered super-holon.
	}
}

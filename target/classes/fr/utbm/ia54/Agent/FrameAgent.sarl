/** 
 * 
 */
package fr.utbm.ia54.Agent

import io.sarl.core.AgentKilled
import io.sarl.core.AgentSpawned
import io.sarl.core.ContextJoined
import io.sarl.core.ContextLeft
import io.sarl.core.Destroy
import io.sarl.core.Initialize
import io.sarl.core.Logging
import io.sarl.core.MemberJoined
import io.sarl.core.MemberLeft
import io.sarl.core.Lifecycle
import fr.utbm.ia54.Event.GameSet
import io.sarl.core.Schedules
import io.sarl.core.DefaultContextInteractions
import io.sarl.core.InnerContextAccess
import fr.utbm.ia54.Event.Assault
import fr.utbm.ia54.Event.FrameSet
import fr.utbm.ia54.Event.FrameSatisfied
import fr.utbm.ia54.Event.TokenReceived
import java.util.UUID
import fr.utbm.ia54.Class.CoordPair

/** 
 * @author Jordan
 * 
 */
agent FrameAgent {
	uses Logging, Lifecycle, Schedules, InnerContextAccess, DefaultContextInteractions

	//var pleased = false // is paired with the right tile
	var isSatisfied = false // TODO: same as pleased !?
	var isBlocked = false // the tile which with it is paired will never move
	
	var nbNeighbours : int
	var northNeighbour : UUID
	var eastNeighbour : UUID
	var southNeighbour : UUID
	var westNeighbour : UUID
	
	var ready = false
	var dimension = -1

	var idNum = -1
  
	// TKS
	var xRow = -1
	var yCol = -1
	var coordPair : CoordPair // coords (Xrow,Ycol) of the frame
	var costG = 0 // from beginning to current
	var costH = 0 // from current to arrival
	var costF = 0 // sum of the previous (memorize)
	var uuidPreviousFrame : UUID
	var coordsXYPreviousFrame : CoordPair

	on Initialize { 
		
		idNum = occurrence.parameters.get(0) as Integer

		// TKS
		xRow = occurrence.parameters.get(1) as Integer
		yCol = occurrence.parameters.get(2) as Integer
		coordPair = new CoordPair(xRow,yCol)
		

		nbNeighbours = 0
		northNeighbour = null
		eastNeighbour = null
		southNeighbour = null
		westNeighbour = null

		loggingName = 'FrameAgent' + idNum

		emit(new FrameSet(this))
		info("Agent is set up.")
	}
	
	// TKS-------------------------------
	def getXRow : int{
		return this.xRow
	}

	def getYCol : int {
		return this.yCol
	}

	def getCoordPair : CoordPair {
		return this.coordPair
	}
	
	def getIsSatisfied : boolean{
		return this.isSatisfied
	}

	def setIsSatisfied(b : boolean) {
		this.isSatisfied = b
	}

	def getIsBlocked : boolean {
		return this.isBlocked
	}

	def setIsBlocked(b : boolean) {
		this.isBlocked = b
	}

 	def getCostG() : int{
		return costG;
	}
	
	def setCostG(costG : int) {
			this.costG = costG;
	}

	def getCostH() : int{
			return costH;
	}

	def setCostH(costH : int) {
			this.costH = costH;
	}

	def getCostF() : int {
			return costF;
	}

	def setCostF(costF : int) {
			this.costF = costF;
	}

	def getUuidPreviousFrame() : UUID {
			return uuidPreviousFrame;
	}

	def setUuidPreviousFrame(uuidPreviousFrame : UUID) {
			this.uuidPreviousFrame = uuidPreviousFrame;
	}

	def getCoordsXYPreviousFrame() : CoordPair {
			return coordsXYPreviousFrame;
	}

	def setCoordsXYPreviousFrame(coordsXYPreviousFrame : CoordPair) {
			this.coordsXYPreviousFrame = coordsXYPreviousFrame;
	}
	
	def getCostsGHF : String{
		return "costG="+this.costG+" /costH="+this.costH+" /costF="+this.costF
	}
	
	
	on Assault {
		if(occurrence.pos == null) {
			
		}
	}

	def getNumFrame : int {
		this.idNum
	}
	
	def setNorthNeighbour(id : UUID) {
		northNeighbour = id
		nbNeighbours++
	}

	def setEastNeighbour(id : UUID) {
		eastNeighbour = id
		nbNeighbours++
	}

	def setSouthNeighbour(id : UUID) {
		southNeighbour = id
		nbNeighbours++
	}

	def setWestNeighbour(id : UUID) {
		westNeighbour = id
		nbNeighbours++
	}

	def getNbNeighbours : int{
		return this.nbNeighbours
	}

	def getNorthNeighbour : UUID {
		return this.northNeighbour
	}
	
	def getEastNeighbour : UUID {
		return this.eastNeighbour
	}
	
	def getSouthNeighbour : UUID {
		return this.southNeighbour
	}
	
	def getWestNeighbour : UUID {
			return this.westNeighbour
	}
		
	on Destroy {
		// Event trigger when the agent is destroyed from the system.
		// You should put all the resource releasing statements in this block of code.
		info("The agent was stopped.")
	}

	on AgentSpawned {
		// A new agent has been spawned in our context.
	}

	on AgentKilled {
		// A new agent has been killed in our context.
	}

	on ContextJoined {
		// Event trigger when an agent of the level joins a shared context.
		// Sent to a agent of the same level.
	}

	on ContextLeft {
		// Event trigger when an agent of the level jleaves a shared context.
		// Sent to a agent of the same level.
	}

	on MemberJoined {
		// Event trigger when an agent joins one of our shared super-holons.
		// Sent to all members of the considered super-holon.
	}

	on MemberLeft {
		// Event trigger when an agent leaves one of our shared super-holons.
		// Sent to all members of the considered super-holon.
	}
	
}

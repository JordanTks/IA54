/** 
 * 
 */
package fr.utbm.ia54.Agent

import io.sarl.core.AgentKilled
import io.sarl.core.AgentSpawned
import io.sarl.core.ContextJoined
import io.sarl.core.ContextLeft
import io.sarl.core.Destroy
import io.sarl.core.Initialize
import io.sarl.core.Logging
import io.sarl.core.MemberJoined
import io.sarl.core.MemberLeft
import io.sarl.core.Lifecycle
import fr.utbm.ia54.Event.GameSet
import io.sarl.core.Schedules
import io.sarl.core.DefaultContextInteractions
import io.sarl.core.InnerContextAccess
import fr.utbm.ia54.Event.Assault

/** 
 * @author Jordan
 * 
 */
agent FrameAgent {
	uses Logging, Lifecycle, Schedules, InnerContextAccess, DefaultContextInteractions

	var ready = false
	var currentX = -1
	var currentY = -1
	var targetX = -1
	var targetY = -1
	var dimension = -1

	var idNum = -1;

	//var r = taux de stisfaction ?

	on Initialize {
		
		idNum = occurrence.parameters.get(0) as Integer
		currentX = occurrence.parameters.get(1) as Integer
		currentY = occurrence.parameters.get(2) as Integer
		dimension = occurrence.parameters.get(3) as Integer

		targetX = idNum / dimension;
		targetY = idNum % dimension;
		
		info("The FrameAgent " + idNum + "is initialized.")
	}
	
	on GameSet {
		ready = true
		//every(1000) [ wake(new "A TOI DE JOUER !") ]
	}
	
	/*on "A TOI DE JOUER !" {
		// si pas content
		// pondérer la proba
		if(droit de bouger) {
			choisi cible agress kk1
			
		}
	}*/

	on Assault {
		// choisir sa fuite ( 1 - 2 - 3 possibilités)
		//
		emit(new Assault(0, 0))
	}

	on Destroy {
		// Event trigger when the agent is destroyed from the system.
		// You should put all the resource releasing statements in this block of code.
		info("The agent was stopped.")
	}

	on AgentSpawned {
		// A new agent has been spawned in our context.
	}

	on AgentKilled {
		// A new agent has been killed in our context.
	}

	on ContextJoined {
		// Event trigger when an agent of the level joins a shared context.
		// Sent to a agent of the same level.
	}

	on ContextLeft {
		// Event trigger when an agent of the level jleaves a shared context.
		// Sent to a agent of the same level.
	}

	on MemberJoined {
		// Event trigger when an agent joins one of our shared super-holons.
		// Sent to all members of the considered super-holon.
	}

	on MemberLeft {
		// Event trigger when an agent leaves one of our shared super-holons.
		// Sent to all members of the considered super-holon.
	}
}

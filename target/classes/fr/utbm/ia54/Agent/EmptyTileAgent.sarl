/** 
 * 
 */
package fr.utbm.ia54.Agent

import io.sarl.core.Initialize
import io.sarl.core.Logging
import fr.utbm.ia54.Event.TokenReceived
import fr.utbm.ia54.Event.TileSet
import fr.utbm.ia54.Event.EndAgent
import io.sarl.core.DefaultContextInteractions
import java.util.UUID
import io.sarl.core.Lifecycle
import fr.utbm.ia54.Event.UpdateProblemInformations
import io.sarl.util.Scopes

agent EmptyTileAgent {
	
	uses Logging, DefaultContextInteractions, Lifecycle

	var isHappy = false
	var numTile = 0
	var numFrameHost : int
	var uuidFrameHost : UUID
  
	on Initialize {
		loggingName = 'EmptyTileAgent' 

		uuidFrameHost = occurrence.parameters.get(0) as UUID
		numFrameHost = occurrence.parameters.get(1) as Integer

		emit(new TileSet(null,this))

		// info("DEBUGG : Agent is set up.")
	}

	// Has to update informations from its frame host & send back data to the frame
	on UpdateProblemInformations {

		uuidFrameHost = occurrence.id
		numFrameHost = occurrence.num
		
		emit(new UpdateProblemInformations(numTile, this.ID, occurrence.sendAckTo), Scopes.addresses(defaultSpace.getAddress(occurrence.id)))
	}
	
	def setIsHappy(happy : boolean){
		this.isHappy = happy
	}
	
	def getNumTile : int{
		return this.numTile
	}
	
	def getNumFrameHost : int{
		return this.numFrameHost
	}
	
	def setNumFrameHost(num : int){
		this.numFrameHost = num
	}
	
	def getUuidFrameHost : UUID{
		return this.uuidFrameHost
	} 
	
	def setUuidFrameHost(uuid : UUID){
		this.uuidFrameHost = uuid
	}

	on TokenReceived {

	}

	on EndAgent {
		killMe
	}
}

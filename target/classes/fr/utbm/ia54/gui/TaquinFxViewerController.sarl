package fr.utbm.ia54.gui

import fr.utbm.ia54.gui.fx.FxViewerController
import javafx.fxml.FXML
import fr.utbm.ia54.Event.ConfigureSimulation
import javafx.scene.control.ScrollBar
import javafx.scene.control.Label
import javafx.scene.layout.Pane
import javafx.scene.shape.Rectangle
import javafx.scene.layout.TilePane
import javafx.scene.Group
import javafx.scene.control.TextField
import javafx.scene.paint.Color
import javafx.scene.text.Text
import java.util.List 
import javafx.application.Platform
import javafx.scene.Node
import javafx.scene.control.CheckBox
import javafx.scene.control.Slider
import fr.utbm.ia54.Class.StaticVars
import javafx.scene.control.RadioButton

class TaquinFxViewerController extends FxViewerController { 

	var launched = false
	var mapCreated = false
	var intSpeed = 0
	
	var gridDisplay = new GridDisplay(0,0) 

	@FXML var pane : Pane
	@FXML var size : TextField
	@FXML var timeOut : Text
	@FXML var idSliderSpeed : Slider
	@FXML var idTextSpeed : Text
	@FXML var idRadioCentralized : RadioButton
	@FXML var idRadioDistributed : RadioButton
	
	@FXML def RefreshSpeed {
		intSpeed = idSliderSpeed.value as int
		var textSpeed : String
		if(intSpeed == 0){
			textSpeed = "SLOW"
			StaticVars.speed = 250;
			idTextSpeed.text = "Speed: " + textSpeed
		}
		else if(intSpeed == 1){
			textSpeed = "NORMAL"
			StaticVars.speed = 150;
			idTextSpeed.text = "Speed: " + textSpeed	
		}
		else if (intSpeed == 2) { 
			textSpeed = "FAST"
			StaticVars.speed = 50;
			idTextSpeed.text = "Speed: " + textSpeed
		} else if (intSpeed == 3) {
			textSpeed = "FASTER"
			StaticVars.speed = 30;
			idTextSpeed.text = "Speed: " + textSpeed
		} else{  
			textSpeed = "The FLASH"
			StaticVars.speed = 0;
			idTextSpeed.text = "Speed of " + textSpeed
		} 				
		
		
		
	}


	def getProbSize : int {
		Integer.parseInt(size.text)
	}
	
	def getDistributedVal : boolean {
		return idRadioDistributed.isSelected
	}
	

	@FXML def startSimu {
		
		// setters call resize 
		gridDisplay.columns = this.probSize
		gridDisplay.rows = this.probSize
		
		// If start pressed again 
		if (!pane.children.contains(gridDisplay.display)) {
			pane.children.add(gridDisplay.display);
		}
		
		StaticVars.problemSize = probSize
		StaticVars.isDistributed = distributedVal

		// Send event
		var ^event = new ConfigureSimulation()
		if (!launched) {
			startAgentApplication() [emitToAgents(^event)]
			launched = true
			mapCreated = false
		} else {
			emitToAgents(^event)
		}
	}

	@FXML def monTest(a : List<Integer>) {
		
		Platform.runLater(new Runnable(){
		def run {
			gridDisplay.construct(a)
		}
		});
		
	}
	
	@FXML def setColor(color : String, numTile : Integer) {

		Platform.runLater(new Runnable() {
			def run {
				var listTiles = gridDisplay.tilePane.children
				
				for (var i = 0; i < listTiles.size; i++) {

					// Get Group (rect + text)
					var group = listTiles.get(i) as Group

					var rect = group.children.get(0) as Rectangle
					var t = group.children.get(1) as Text
					
					if(t.text.equals(Integer.toString(numTile))){
						if(color.equals("red"))
							rect.fill = Color.RED
						else if (color.equals("blue"))
							rect.fill = Color.BLUE
						else if (color.equals("green"))
							rect.fill = Color.GREEN
						else if (color.equals("purple"))
							rect.fill = Color.PURPLE
						else if (color.equals("orange"))
							rect.fill = Color.DARKORANGE
						else if (color.equals("turquoise"))
							rect.fill = Color.DARKTURQUOISE
						return
					}
				}
			}
		});
	}
	
	@FXML def reset() {
		Platform.runLater(
			new Runnable() {
				def run {
/*
					var listTiles = gridDisplay.tilePane.children
					for (var i = 0; i < listTiles.size; i++) {
						var t = listTiles.get(i) as Text
						t.fill = Color.BLACK
					}
*/
				}
			}
		)
	}
	
	@FXML def updateTimeoutUi() {
		Platform.runLater( 
			new Runnable() {
				def run {
					timeOut.text = ""+StaticVars.timeout
				}
			}
		)
	}
	
	// SWAP numTile
	@FXML def swap(number : int) {
		Platform.runLater(
			new Runnable() {
				def run {

					var listTiles = gridDisplay.tilePane.children
					var tile1 : Text
					var tile2 : Text
					var rect1 : Rectangle
					var rect2 : Rectangle

					for (var i = 0; i < listTiles.size; i++) {

						// Get Group (rect + text)
						var group = listTiles.get(i) as Group

						var rect = group.children.get(0) as Rectangle
						var t = group.children.get(1) as Text

						if (t.text.equals(" ")) {
							tile1 = t
							rect1 = rect
						}

						if (t.text.equals(Integer.toString(number))) {
							tile2 = t
							rect2 = rect
						}

					}
					
					// SWAP
					rect2.fill = Color.WHITE
					rect1.fill = Color.GREY 
					
					tile1.text = tile2.text
					tile2.text = " "
					//tile2.fill = Color.WHITE
					//
					

				}
			}
		)
	}

	// CLASS GRID MANAGER
	static class GridDisplay {

		var tilePane = new TilePane();
		var display = new Group(tilePane);

		val ELEMENT_SIZE : double = 50; 
		val GAP : double = ELEMENT_SIZE / 10;

        var nRows : int;
        var	nCols : int;
        
        var cpt : int = 0;
		
		new (nRows : int, nCols : int) {
			//tilePane.setStyle("-fx-background-color: rgba(255, 215, 0, 0.1);");
			tilePane.setHgap(5);
			tilePane.setVgap(5);
			setColumns(nCols);
			setRows(nRows);
		}

		def  setColumns(newColumns : int) {
            nCols = newColumns;
            tilePane.setPrefColumns(nCols);
		}

		def setRows(newRows : int) {
            nRows = newRows;
            tilePane.setPrefRows(nRows);
		}
        
	
		def construct(a : List<Integer>) {
			tilePane.getChildren().clear();
			cpt = 0;

			var list = tilePane.getChildren()
	
			for (var i = 0; i < nCols; i++) { 
				for (var j = 0; j < nRows; j++) {

					var root = new Group()
					
					if (cpt < a.size) {
						var text = new Text(a.get(cpt).toString)
						text.x = 5
						text.y = 22
						text.fill = Color.WHITE
						text.setStyle("-fx-font-size: 20px;");
						
						var rect = new Rectangle(30, 30)
						rect.fill = Color.GREY
						
						root.children.add(rect)
						root.children.add(text)
						
						tilePane.getChildren().add(root)

					} else { // blank tile
						var text = new Text(" ")
						text.x = 5
						text.y = 22
						text.fill = Color.WHITE
						text.setStyle("-fx-font-size: 20px;");
						var rect = new Rectangle(30, 30)
						rect.fill = Color.WHITE

						root.children.add(rect)
						root.children.add(text)
						
						tilePane.getChildren().add(root)
					}
					cpt++

				}
			}
		}
		
		
		
	}
	
}





